#!/usr/bin/env python
"""
A script to control Spotify from the command line, requires Spotify to be
running. Use spotify-control -h to print usage.
"""
from argparse import ArgumentParser
import logging
import os
import sys
import time
from spotify import SpotifyDbus


__author__ = 'Mark Garratt'
__version__ = '0.0'

start_time = time.time()


def parse_arguments():
    """
    :return: Parsed command line arguments
    """
    parser = ArgumentParser(
        usage='%(prog)s [options] [command] [args ...]',
        description=__doc__,
        epilog='Use spotify-control print_commands for all available commands',
        prog=os.path.basename(sys.argv[0])
    )

    parser.add_argument('command', metavar='command', type=str,
                        help='The command to give to Spotify')
    parser.add_argument('args', metavar='args', nargs='*', type=str,
                        help='Argument sto pass with the Spotify command')
    parser.add_argument('--version', action='version', version=__version__)
    parser.add_argument('--verbose', '-v', action='count', default=0,
                        help='increase log level [warn]')
    parser.add_argument('--quiet', '-q', action='count', default=0,
                        help='decrease log level [warn]')
    parser.add_argument('--logfile', metavar='file',
                        help='log to file instead of <stderr>')

    return parser.parse_args()


def configure_logging(config):
    """
    :param config: Level to set logging int 0 - 2 for quiet or verbose
    :return: None
    """
    log_adjust = max(min(config.quiet - config.verbose, 2), -2) * 10
    logging.basicConfig(
        filename=config.logfile,
        level=logging.WARNING + log_adjust,
        format='%(levelname)-8s %(module) 10s: %(funcName)s %(message)s'
    )


def execute_command_on_spotify_dbus(spotify_dbus, command, command_args=None):
    """
    Avoid maintaining a list of commands by calling directly onto the DBus class
    :param spotify_dbus: Instance of SpotifyDbus
    :param command: Command (function or attribute get/set)
    :param command_args: Arguments to pass, if any
    :return: Result from command
    """
    if command_args is None:
        command_args = []

    # Special handling for Volume property
    if command == 'Volume':
        current_vol = spotify_dbus.Volume
        if len(command_args) == 1:
            if command_args[0] == 'up':
                new_vol = min(1.0, current_vol + 0.1)
            elif command_args[0] == 'down':
                new_vol = max(0.0, current_vol - 0.1)
            else:
                try:
                    new_vol = float(command_args[0])
                except ValueError:
                    raise ValueError("Volume must be a number between 0 and 1, or 'up'/'down'")
            command_args = [max(0.0, min(1.0, new_vol))]  # Clamp between 0 and 1

    attr = getattr(spotify_dbus, command)

    if callable(attr):
        return attr(*command_args)

    if len(command_args) > 0:
        setattr(spotify_dbus, command, *command_args)
        attr = getattr(spotify_dbus, command)

    return attr


if __name__ == '__main__':
    args = parse_arguments()

    configure_logging(args)

    spotify_dbus = SpotifyDbus(logging)

    command = args.command
    command_args = args.args

    try:
        result = execute_command_on_spotify_dbus(spotify_dbus, command, command_args)

        if isinstance(result, list):
            result = ', '.join(result)

        if result is not None:
            print(result)
    except AttributeError:
        logging.error('Unknown command \'{}\''.format(command))
        sys.exit(1)
    except KeyboardInterrupt as e:  # Ctrl-C
        raise e
    except SystemExit as e:  # sys.exit()
        raise e
    except Exception as e:
        logging.exception("Unexpected exception")
        sys.exit(1)

    run_time = (time.time() - start_time) / 60.0
    logging.info('Run time: {}'.format(run_time))
    sys.exit(0)
