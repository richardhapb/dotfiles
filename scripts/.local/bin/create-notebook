#!/usr/bin/env python
"""
create-notebook.py
Creates a Jupyter notebook with specified template
Usage: create-notebook <notebook_name> [--template=<template_name>]
"""
import argparse
import nbformat

def create_basic_notebook(name, template='basic'):
    """Create a new notebook with a specified template"""
    nb = nbformat.v4.new_notebook()
    
    # Set metadata
    nb.metadata = {
        'kernelspec': {
            'display_name': 'Python 3',
            'language': 'python',
            'name': 'python3'
        }
    }
    
    # Choose template
    if template == 'basic':
        # Create markdown cell for title
        title_cell = nbformat.v4.new_markdown_cell("# New Notebook\n ")
        # Create import cell separately
        import_cell = nbformat.v4.new_code_cell('import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt')
        
        cells = [title_cell, import_cell]
    elif template == 'data_analysis':
        cells = [
            nbformat.v4.new_markdown_cell("# Data Analysis Notebook"),
            nbformat.v4.new_code_cell('import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns'),
            nbformat.v4.new_markdown_cell("## Load Data"),
            nbformat.v4.new_code_cell('# Load your data\n# df = pd.read_csv("data.csv")'),
            nbformat.v4.new_markdown_cell("## Exploratory Data Analysis"),
            nbformat.v4.new_code_cell('# Explore your data\n# df.head()\n# df.describe()'),
            nbformat.v4.new_markdown_cell("## Visualization"),
            nbformat.v4.new_code_cell('# Create visualizations\n# plt.figure(figsize=(10, 6))\n# Add visualization code here')
        ]
    else:
        cells = [nbformat.v4.new_markdown_cell("# New Notebook")]
    
    # Add cells to notebook
    nb.cells.extend(cells)
    
    # Ensure .ipynb extension
    if not name.endswith('.ipynb'):
        name += '.ipynb'
    
    # Write notebook to file
    with open(name, 'w') as f:
        nbformat.write(nb, f)
    
    return name

def main():
    parser = argparse.ArgumentParser(description='Create a Jupyter notebook')
    parser.add_argument('notebook_name', help='Name of the notebook to create')
    parser.add_argument('--template', default='basic', help='Template to use (basic or data_analysis)')
    
    args = parser.parse_args()
    
    notebook_path = create_basic_notebook(args.notebook_name, args.template)
    print(f"Created notebook: {notebook_path}")

if __name__ == "__main__":
    main()
