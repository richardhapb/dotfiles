target-version = "py314"

# Formatting
line-length = 120
indent-width = 4
exclude = [
    ".git",
    ".ruff_cache",
    "__pycache__",
    "venv",
    ".venv",
    "migrations",
    "build",
    "dist"
]

[lint]
preview = true
select = [
    "E", # Errors
    "W", # Warnings
    "F",  # Pyflakes rules
    "B", # flake-8 bugbear rules
    "PL", # Pylint rules
    "EM", # Error handling
    "ICN", # Import conventions
    "LOG", # Logging rules
    "G",  # Logging format
    "T10", # Debug rules
    "PT", # PyTest style
    "RET", # Return statements
    "SIM", # Simplicity
    "ARG", # Unused arguments
    "C4", # Comprehensions
    "TC", # Type checker rules
    "C90", # Cyclomatic complexity
    "N",  # Naming conventions PEP8
    "UP", # Code modernization suggestions
    "TRY", # Try/Except rules
    "RUF", # Ruff specific rules
    "ANN", # Type annotations
    "ASYNC", # Asynchronous code rules
    "S", # Security issues
]

# Ignored rules
ignore = [
    "SIM910", # Use dict.get() without a default value
    "D100", # Docstrings in modules
    "D203", # Avoid this warning: `incorrect-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible. Ignoring `incorrect-blank-line-before-class`.
    "D205", # Space after first line
    "D212", # Allow non-initialization in the first line of multiline comments
    "D202", # Allow blank lines after function docstrings
    "D400", # Punctuation in the first line
    "D415", # Punctuation in the first line
    # Methods documentation:
    "ANN002", # args
    "ARG004",  # args
    "ANN003", # kwargs
    "ARG004", # kwargs
    "ANN204", # Special methods
    "D102",   # Docstring in public method
    "D107",   # Docstring in __init__
    "E402",  # Import in top-level
]

# Per-file ignores
[lint.per-file-ignores]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests...
    "ANN201", # Not return type required
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]
"tests.py" = [
    "S101", # asserts allowed in tests...
    "ANN201", # Not return type required
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]

# Jupyter notebook specific ignores
"*.ipynb" = [
    "E402", # Module level import not at top of file - common in notebooks
    "W391", # Blank line at end of file - notebooks often have trailing cells
    "E302", # Expected ... blank lines
    "E303", # Too many blank lines - notebooks naturally have spacing
    "B018", # Found useless expression - notebooks often have expressions for output
    "F401", # Imported but unused - common in exploratory notebooks
    "F841", # Local variable assigned but never used - common in data exploration
    "T201", # print() statements - notebooks use print for output
    "T203", # pprint() statements - notebooks use pprint for debugging
    "S101", # Use of assert - notebooks often use assert for quick checks
    "PLR2004", # Magic values - notebooks often have hardcoded values for analysis
    "ANN", # Type annotations - not typically used in notebooks
    "D", # Docstring rules - notebooks don't need full docstrings
    "ARG001", # Unused function arguments - common in notebook helper functions
    "C901", # Function too complex - notebook functions can be exploratory
    "PLR0913", # Too many arguments - notebook functions can be experimental
    "UP006", # Type annotations - notebooks often use older typing syntax
    "UP007", # Union type syntax - notebooks often use older syntax
    "N999", # Invalid module name - notebook files often have descriptive names
    "INP001", # Implicit namespace package - notebooks aren't packages
]

[lint.mccabe]
max-complexity = 10

[format]
indent-style = "space"
quote-style = "double"

